const express = require('express');
const { Client, NoAuth } = require('whatsapp-web.js');
const fs = require('fs');
const path = require('path');

const router = express.Router();

router.get('/:number', async (req, res) => {
  const number = req.params.number;

  // Validate input
  if (!number || !/^\d+$/.test(number)) {
    return res.status(400).send('Invalid phone number.');
  }

  const sessionFile = path.join(__dirname, '..', 'sessions', `${number}.json`);

  // Remove old session if exists
  if (fs.existsSync(sessionFile)) {
    fs.unlinkSync(sessionFile);
  }

  const client = new Client({
    authStrategy: new NoAuth(),
    puppeteer: {
      headless: true,
      args: ['--no-sandbox', '--disable-setuid-sandbox']
    }
  });

  client.on('qr', qr => {
    const qrURL = `https://api.qrserver.com/v1/create-qr-code/?data=${encodeURIComponent(qr)}&size=300x300`;

    res.send(`
      <html>
        <head>
          <title>SAVAGE-XMD QR Scanner</title>
        </head>
        <body style="background:#000;color:#fff;text-align:center;font-family:sans-serif;">
          <h1>ðŸ¤– SAVAGE-XMD</h1>
          <p>QR Pairing for: <strong>${number}</strong></p>
          <img src="${qrURL}" alt="QR Code"/>
          <p>Scan using WhatsApp and wait for pairing...</p>
        </body>
      </html>
    `);
  });

  client.on('authenticated', (session) => {
    fs.writeFileSync(sessionFile, JSON.stringify(session));
    console.log(`âœ… Session saved for ${number}`);
  });

  client.on('ready', () => {
    console.log(`Client is ready for ${number}`);
  });

  client.initialize();
});

module.exports = router;
